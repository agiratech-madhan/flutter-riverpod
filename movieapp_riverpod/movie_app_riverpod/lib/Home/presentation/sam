  Autocomplete<MovieData>(
        // optionsBuilder: (textEditingValue) {
        //   return ''as List;
        //   // if (textEditingValue.text == '') {
        //   //   return List.empty();
        //   // } else {
        //   //   return provider.moviesSearch!.item
        //   //       .where((e) =>
        //   //           // print('Madhan${e.title}');
        //   //           e.title!.toLowerCase().contains(
        //   //               textEditingValue.text.toLowerCase()))
        //   //       .toList();
        //   // }
        // },
        fieldViewBuilder: (BuildContext context,
            TextEditingController controller,
            FocusNode focusNode,
            Function onFieldSubmitted) {
          // this.controller = controller;
          return TextField(
            onSubmitted: (value) async {
              // isSearch = true;
              // await provider.loadData(controller.text);

              // isSearch = false;
              // FocusManager.instance.primaryFocus?.unfocus();
            },
            focusNode: focusNode,
            controller: controller,
            decoration: InputDecoration(
                hintText: 'Search',
                border: OutlineInputBorder(
                  borderSide: BorderSide.none,
                  borderRadius: BorderRadius.circular(20.0),
                ),
                filled: true,
                fillColor: Colors.grey.withOpacity(0.7),
                prefixIconColor: Colors.red,
                prefixIcon: IconButton(
                    onPressed: (() async {
                      // isSearch = true;
                      // await provider.loadData(controller.text);

                      // isSearch = false;
                      // FocusManager.instance.primaryFocus?.unfocus();
                    }),
                    icon: const Icon(
                      Icons.search,
                      color: Colors.white,
                    )),
                suffixIcon: const Icon(
                  Icons.mic_none_rounded,
                  color: Colors.grey,
                ),
                suffixIconColor: Colors.grey),
          );
        },
        onSelected: (option) async {
          // try {
          //   isSearch = true;
          //   await provider.loadData((option.title)!.toLowerCase());
          //   FocusManager.instance.primaryFocus?.unfocus();
          //   isSearch = false;
          // } catch (e) {
          //   throw 'Error Ocuured';
          // }
        },
        displayStringForOption: (MovieData d) {
          return d.title!;
        },
      ),

